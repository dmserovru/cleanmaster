import os
import logging
import requests
import asyncio
import nest_asyncio
import time
from telegram import Update, Message
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from core.sync_downloader import DownloadManager
from pathlib import Path
from config.settings import settings
from urllib.parse import urlparse

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö event loops
nest_asyncio.apply()

logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self, download_manager: DownloadManager):
        self.download_manager = download_manager
        self.application = None
        self.bot_token = settings.telegram_bot_token
        self.virustotal_api_key = settings.virustotal_api_key
        self.download_folder = Path.home() / settings.download_folder
        self.download_tasks = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        self.tracked_downloads = set()  # –°–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ID –∑–∞–≥—Ä—É–∑–æ–∫
        self.chat_ids = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ ID —á–∞—Ç–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        self.monitor_task = None  # –ó–∞–¥–∞—á–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≥—Ä—É–∑–æ–∫
        self._running = False
        self._initialize_bot()
        
    def _initialize_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = Application.builder().token(self.bot_token).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.application.add_handler(CommandHandler("start", self.start))
            self.application.add_handler(CommandHandler("help", self.help))
            self.application.add_handler(CommandHandler("check", self.check_file))
            self.application.add_handler(CommandHandler("download", self.start_download))
            self.application.add_handler(CommandHandler("status", self.show_downloads_status))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ URL
            self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_url))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            raise
            
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        chat_id = update.effective_chat.id
        self.chat_ids.add(chat_id)
        
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª, –∏ —è –ø—Ä–æ–≤–µ—Ä—é –µ–≥–æ –Ω–∞ –≤–∏—Ä—É—Å—ã –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π."
        )
        
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/check <url> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
/download <url> - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–∏—Ö –∑–∞–≥—Ä—É–∑–æ–∫

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª, –∏ —è –ø—Ä–æ–≤–µ—Ä—é –µ–≥–æ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.
        """
        await update.message.reply_text(help_text)
        
    async def show_downloads_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–∏—Ö –∑–∞–≥—Ä—É–∑–æ–∫"""
        chat_id = update.effective_chat.id
        self.chat_ids.add(chat_id)
        
        downloads = self.download_manager.get_all_downloads()
        if not downloads:
            await update.message.reply_text("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫.")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∑–æ–∫
        status_message = "–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–æ–∫:\n\n"
        for download in downloads:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ
            self.tracked_downloads.add(download["id"])
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ
            status_message += f"üìÅ {download['name']}\n"
            status_message += f"–°—Ç–∞—Ç—É—Å: {download['status']}\n"
            if download['status'] == "–ó–∞–≥—Ä—É–∑–∫–∞":
                status_message += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {download['progress']}\n"
                status_message += f"–°–∫–æ—Ä–æ—Å—Ç—å: {download['speed']}\n"
            status_message += f"–†–∞–∑–º–µ—Ä: {download['size']}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ –≤–∏—Ä—É—Å—ã, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if "virus_scan" in download:
                scan_result = download["virus_scan"]
                status_emoji = {
                    "safe": "‚úÖ",
                    "warning": "‚ö†Ô∏è",
                    "danger": "üö®",
                    "error": "‚ùì",
                    "pending": "‚è≥",
                    "unknown": "‚ùì",
                    "info": "‚ÑπÔ∏è"
                }.get(scan_result["status"], "‚ùì")
                
                status_message += f"–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {status_emoji} {scan_result['message']}\n"
            
            status_message += "\n"
            
        await update.message.reply_text(status_message)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
        if not self.monitor_task or self.monitor_task.done():
            self.monitor_task = asyncio.create_task(self._monitor_downloads())
        
    async def check_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check"""
        if not context.args:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            return
            
        url = context.args[0]
        if not url.startswith(('http://', 'https://')):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª.")
            return
            
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            status_message = await update.message.reply_text("üîç –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–∞–π–ª–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            response = requests.head(url)
            content_type = response.headers.get('content-type', '')
            content_length = response.headers.get('content-length', '0')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
            is_executable = any(ext in url.lower() for ext in ['.exe', '.dll', '.msi', '.bat', '.cmd', '.ps1'])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            report = f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:\n\n"
            report += f"üì¶ –¢–∏–ø —Ñ–∞–π–ª–∞: {content_type}\n"
            report += f"üìà –†–∞–∑–º–µ—Ä: {int(content_length) / 1024 / 1024:.2f} MB\n"
            report += f"‚ö†Ô∏è –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª: {'–î–∞' if is_executable else '–ù–µ—Ç'}\n\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ VirusTotal
            if is_executable:
                report += "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ VirusTotal...\n"
                
                # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                upload_url = "https://www.virustotal.com/vtapi/v2/url/scan"
                params = {"apikey": self.virustotal_api_key, "url": url}
                
                response = requests.post(upload_url, data=params)
                response.raise_for_status()
                result = response.json()
                
                if "resource" in result:
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
                    report_url = "https://www.virustotal.com/vtapi/v2/url/report"
                    params = {
                        "apikey": self.virustotal_api_key,
                        "resource": result["resource"]
                    }
                    
                    response = requests.get(report_url, params=params)
                    response.raise_for_status()
                    report_data = response.json()
                    
                    if report_data.get("response_code") == 1:
                        positives = report_data.get("positives", 0)
                        total = report_data.get("total", 0)
                        
                        report += f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:\n"
                        report += f"‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {positives} –∏–∑ {total} –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–æ–≤ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ —É–≥—Ä–æ–∑—ã\n\n"
                        
                        if positives > 0:
                            report += "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —É–≥—Ä–æ–∑—ã:\n"
                            for scanner, result in report_data.get("scans", {}).items():
                                if result.get("detected"):
                                    report += f"- {scanner}: {result.get('result', 'N/A')}\n"
                        else:
                            report += "‚úÖ –£–≥—Ä–æ–∑ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.\n"
                    else:
                        report += "‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"
                else:
                    report += "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞.\n"
            else:
                report += "‚ÑπÔ∏è –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º, –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ VirusTotal –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.\n"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            await status_message.edit_text(report)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞: {e}")
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            
    async def handle_url(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ URL-—Å–æ–æ–±—â–µ–Ω–∏–π"""
        url = update.message.text
        if not url.startswith(('http://', 'https://')):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª.")
            return
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É check –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞
        context.args = [url]
        await self.check_file(update, context)
            
    async def start_download(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /download –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
        args = context.args
        if not args:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏\n–ü—Ä–∏–º–µ—Ä: /download https://example.com/file.zip")
            return
            
        url = args[0]
        download_path = Path(self.download_folder)
        
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
            if not url.startswith(('http://', 'https://')):
                await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL. URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            download_path.mkdir(parents=True, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            parsed_url = urlparse(url)
            filename = os.path.basename(parsed_url.path)
            
            if not filename:
                filename = "download"
                
            file_path = download_path / filename
            
            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
            message = await update.message.reply_text(f"–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ {filename}...\n–°–æ—Ö—Ä–∞–Ω—è—é –≤ {file_path}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≥—Ä—É–∑–æ–∫
            self.download_manager.add_download(url, file_path)
            
            # –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å
            await asyncio.sleep(3)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ
            downloads = self.download_manager.get_all_downloads()
            for download in downloads:
                if download["url"] == url:
                    download_id = download["id"]
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                    self.download_tasks[download_id] = asyncio.create_task(
                        self._update_download_status(message, download_id)
                    )
                    return
            
            await message.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ {filename}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

    async def _update_download_status(self, message: Message, download_id: str) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        try:
            prev_status = None
            is_completed = False
            
            while not is_completed:
                download_info = self.download_manager.get_download_by_id(download_id)
                
                if not download_info:
                    await message.edit_text("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    return
                    
                status = download_info["status"]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å
                if status != prev_status:
                    if status == "–ó–∞–≥—Ä—É–∑–∫–∞":
                        await message.edit_text(
                            f"–ó–∞–≥—Ä—É–∑–∫–∞: {download_info['name']}\n"
                            f"–°—Ç–∞—Ç—É—Å: {status}\n"
                            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {download_info['progress']}\n"
                            f"–°–∫–æ—Ä–æ—Å—Ç—å: {download_info['speed']}\n"
                            f"–†–∞–∑–º–µ—Ä: {download_info['size']}"
                        )
                    elif status == "–ó–∞–≤–µ—Ä—à–µ–Ω–æ":
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ –≤–∏—Ä—É—Å—ã
                        virus_info = ""
                        if "virus_scan" in download_info:
                            scan_result = download_info["virus_scan"]
                            status_emoji = {
                                "safe": "‚úÖ",
                                "warning": "‚ö†Ô∏è",
                                "danger": "üö®",
                                "error": "‚ùì",
                                "pending": "‚è≥",
                                "unknown": "‚ùì",
                                "info": "‚ÑπÔ∏è"
                            }.get(scan_result["status"], "‚ùì")
                            
                            virus_info = f"\n\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∏—Ä—É—Å—ã: {status_emoji} {scan_result['message']}"
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ç—á–µ—Ç, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                            if "link" in scan_result:
                                virus_info += f"\n[–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç]({scan_result['link']})"
                        
                        await message.edit_text(
                            f"–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n"
                            f"–§–∞–π–ª: {download_info['name']}\n"
                            f"–†–∞–∑–º–µ—Ä: {download_info['size']}\n"
                            f"–ü—É—Ç—å: {download_info['path']}\n"
                            f"MD5: `{download_info['md5']}`\n"
                            f"SHA1: `{download_info['sha1']}`"
                            f"{virus_info}",
                            parse_mode="Markdown"
                        )
                        is_completed = True
                    elif status in ["–û—Ç–º–µ–Ω–µ–Ω–æ", "–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É", "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏"]:
                        await message.edit_text(
                            f"–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å ‚ùå\n"
                            f"–§–∞–π–ª: {download_info['name']}\n"
                            f"–°—Ç–∞—Ç—É—Å: {status}\n"
                            f"URL: {download_info['url']}"
                        )
                        is_completed = True
                    elif status == "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞...":
                        await message.edit_text(
                            f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ üîç\n"
                            f"–§–∞–π–ª: {download_info['name']}\n"
                            f"–†–∞–∑–º–µ—Ä: {download_info['size']}\n"
                            f"–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∏—Ä—É—Å—ã..."
                        )
                    elif status == "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ":
                        await message.edit_text(
                            f"–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚è∏\n"
                            f"–§–∞–π–ª: {download_info['name']}\n"
                            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {download_info['progress']}\n"
                            f"–†–∞–∑–º–µ—Ä: {download_info['size']}"
                        )
                    elif status == "–í –æ—á–µ—Ä–µ–¥–∏":
                        await message.edit_text(
                            f"–§–∞–π–ª –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É ‚è≥\n"
                            f"–§–∞–π–ª: {download_info['name']}\n"
                            f"URL: {download_info['url']}"
                        )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                prev_status = status
                
                # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∂–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                if not is_completed:
                    if status == "–ó–∞–≥—Ä—É–∑–∫–∞":
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
                        await message.edit_text(
                            f"–ó–∞–≥—Ä—É–∑–∫–∞: {download_info['name']}\n"
                            f"–°—Ç–∞—Ç—É—Å: {status}\n"
                            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {download_info['progress']}\n"
                            f"–°–∫–æ—Ä–æ—Å—Ç—å: {download_info['speed']}\n"
                            f"–†–∞–∑–º–µ—Ä: {download_info['size']}"
                        )
                    await asyncio.sleep(3)
                    
        except Exception as e:
            logger.error(f"Error updating download status in Telegram: {e}")
            try:
                await message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            self._running = True
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≥—Ä—É–∑–æ–∫
            asyncio.run_coroutine_threadsafe(self._monitor_downloads(), asyncio.get_event_loop())
            self.application.run_polling(allowed_updates=Update.ALL_TYPES)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise
            
    async def _monitor_downloads(self):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–∞"""
        logger.info("Starting download monitor task")
        
        prev_statuses = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–≥—Ä—É–∑–æ–∫
        
        while self._running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏
                downloads = self.download_manager.get_all_downloads()
                
                for download in downloads:
                    download_id = download["id"]
                    current_status = download["status"]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
                    if download_id in prev_statuses and prev_statuses[download_id] != current_status:
                        # –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —á–∞—Ç–∞–º
                        for chat_id in self.chat_ids:
                            await self._send_status_notification(chat_id, download)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ
                    if download_id not in prev_statuses:
                        for chat_id in self.chat_ids:
                            await self._send_new_download_notification(chat_id, download)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å
                    prev_statuses[download_id] = current_status
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∑–∞–≥—Ä—É–∑–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç
                download_ids = {d["id"] for d in downloads}
                for download_id in list(prev_statuses.keys()):
                    if download_id not in download_ids:
                        del prev_statuses[download_id]
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(2)
                
            except Exception as e:
                logger.error(f"Error in download monitor: {e}")
                await asyncio.sleep(5)  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–µ–ª–∞–µ–º –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—É—é –ø–∞—É–∑—É
        
        logger.info("Download monitor task stopped")
    
    async def _send_status_notification(self, chat_id, download):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å—Ç–∞—Ç—É—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏"""
        try:
            status = download["status"]
            
            if status == "–ó–∞–≤–µ—Ä—à–µ–Ω–æ":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ –≤–∏—Ä—É—Å—ã
                virus_info = ""
                if "virus_scan" in download:
                    scan_result = download["virus_scan"]
                    status_emoji = {
                        "safe": "‚úÖ",
                        "warning": "‚ö†Ô∏è",
                        "danger": "üö®",
                        "error": "‚ùì",
                        "pending": "‚è≥",
                        "unknown": "‚ùì",
                        "info": "‚ÑπÔ∏è"
                    }.get(scan_result["status"], "‚ùì")
                    
                    virus_info = f"\n\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∏—Ä—É—Å—ã: {status_emoji} {scan_result['message']}"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ç—á–µ—Ç, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                    if "link" in scan_result:
                        virus_info += f"\n[–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç]({scan_result['link']})"
                
                message = (
                    f"–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n"
                    f"–§–∞–π–ª: {download['name']}\n"
                    f"–†–∞–∑–º–µ—Ä: {download['size']}\n"
                    f"–ü—É—Ç—å: {download['path']}\n"
                    f"MD5: `{download['md5']}`\n"
                    f"SHA1: `{download['sha1']}`"
                    f"{virus_info}"
                )
                
                await self.application.bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    parse_mode="Markdown"
                )
            
            elif status in ["–û—Ç–º–µ–Ω–µ–Ω–æ", "–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É", "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏"]:
                message = (
                    f"–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å ‚ùå\n"
                    f"–§–∞–π–ª: {download['name']}\n"
                    f"–°—Ç–∞—Ç—É—Å: {status}\n"
                    f"URL: {download['url']}"
                )
                
                await self.application.bot.send_message(
                    chat_id=chat_id,
                    text=message
                )
                
            elif status == "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞...":
                message = (
                    f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ üîç\n"
                    f"–§–∞–π–ª: {download['name']}\n"
                    f"–†–∞–∑–º–µ—Ä: {download['size']}\n"
                    f"–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∏—Ä—É—Å—ã..."
                )
                
                await self.application.bot.send_message(
                    chat_id=chat_id,
                    text=message
                )
        
        except Exception as e:
            logger.error(f"Error sending status notification: {e}")
    
    async def _send_new_download_notification(self, chat_id, download):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ"""
        try:
            message = (
                f"–ù–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ üì•\n"
                f"–§–∞–π–ª: {download['name']}\n"
                f"URL: {download['url']}\n"
                f"–°—Ç–∞—Ç—É—Å: {download['status']}"
            )
            
            await self.application.bot.send_message(
                chat_id=chat_id,
                text=message
            )
            
        except Exception as e:
            logger.error(f"Error sending new download notification: {e}")
            
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self.application and self._running:
            try:
                self._running = False
                if self.monitor_task:
                    self.monitor_task.cancel()
                self.application.stop()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
                raise